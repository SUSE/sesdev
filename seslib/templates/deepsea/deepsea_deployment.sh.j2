{% if deepsea_git_repo %}
cd /root
git clone {{ deepsea_git_repo }}
cd DeepSea
git checkout {{ deepsea_git_branch }}
make install
{% else %}
{% if version == 'ses5' %}
zypper -n install deepsea
{% else %}
zypper -n install deepsea deepsea-cli
{% endif %}
{% endif %}
deepsea --version

# generate policy.cfg
mkdir -p /srv/pillar/ceph/proposals
cat > /srv/pillar/ceph/proposals/policy.cfg <<EOF
{% include "deepsea/" + version + "_policy.cfg.j2" %}
EOF

{% include "deepsea/" + version + "_pre_stage_0.sh.j2" ignore missing %}

chown -R salt:salt /srv

# make sure all minions are responding
set +ex
LOOP_COUNT="0"
while true ; do
  set -x
  sleep 5
  set +x
  if [ "$LOOP_COUNT" -ge "20" ] ; then
    echo "ERROR: minion(s) not responding to ping?"
    exit 1
  fi
  LOOP_COUNT="$((LOOP_COUNT + 1))"
  set -x
  MINIONS_RESPONDING="$(salt '*' test.ping | grep True | wc --lines)"
  if [ "$MINIONS_RESPONDING" = "{{ nodes|length }}" ]; then
    break
  fi
  set +x
done
set -ex

sleep 2
salt '*' grains.set deepsea True
sleep 5

{% if pre_stage_0_script %}
{{ pre_stage_0_script }}
{% endif %}

{% if stop_before_stage == 0 %}
exit 0
{% endif %}

{% if use_deepsea_cli %}
echo "$PATH"
type deepsea
{% endif %}

echo ""
echo "***** RUNNING stage.0 *******"
{% if use_deepsea_cli %}
deepsea stage run --simple-output ceph.stage.0
{% else %}
salt-run state.orch ceph.stage.0
{% endif %}
sleep 5

{% include "deepsea/" + version + "_pre_stage_1.sh.j2" ignore missing %}

{% if stop_before_stage == 1 %}
exit 0
{% endif %}

echo ""
echo "***** RUNNING stage.1 *******"
{% if use_deepsea_cli %}
deepsea stage run --simple-output ceph.stage.1
{% else %}
salt-run state.orch ceph.stage.1
{% endif %}
sleep 5

{% include "deepsea/" + version + "_pre_stage_2.sh.j2" ignore missing %}

{% if stop_before_stage == 2 %}
exit 0
{% endif %}

echo ""
echo "***** RUNNING stage.2 *******"
{% if use_deepsea_cli %}
deepsea stage run --simple-output ceph.stage.2
{% else %}
salt-run state.orch ceph.stage.2
{% endif %}
sleep 5

{% include "deepsea/" + version + "_pre_stage_3.sh.j2" ignore missing %}

{% if stop_before_stage == 3 %}
exit 0
{% endif %}

{% if encrypted_osds %}
echo "  encryption: True" >> /srv/salt/ceph/configuration/files/drive_groups.yml
{% endif %}
cat /srv/salt/ceph/configuration/files/drive_groups.yml

echo ""
echo "***** RUNNING stage.3 *******"
{% if use_deepsea_cli %}
DEV_ENV=true deepsea stage run --simple-output ceph.stage.3
{% else %}
DEV_ENV=true salt-run state.orch ceph.stage.3
{% endif %}
sleep 5

{% if nodes|length < 3 %}
# the failure domains needs to be 'osd' in order for pgs to be replicated in less
# than 3 nodes
ceph osd crush rule rm replicated_rule
ceph osd crush rule create-replicated replicated_rule default osd
{% endif %}

{% if total_osds < 6 %}
{% if version != 'ses5' %}
# we need to increase the number of max pg per osd for deepsea to work
# correctly with this number of OSDs
ceph config set global mon_max_pg_per_osd 500
{% endif %}
{% endif %}

{% include "deepsea/" + version + "_pre_stage_4.sh.j2" ignore missing %}

{% if stop_before_stage == 4 %}
exit 0
{% endif %}

{% if deepsea_need_stage_4 %}
echo ""
echo "***** RUNNING stage.4 *******"
{% if use_deepsea_cli %}
deepsea stage run --simple-output ceph.stage.4
{% else %}
salt-run state.orch ceph.stage.4
{% endif %}
sleep 5
{% endif %} {# deepsea_need_stage_4 #}

echo "deployment complete!"
