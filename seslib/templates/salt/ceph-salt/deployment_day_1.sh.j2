
set -ex

{% if ceph_salt_git_repo and ceph_salt_git_branch %}
# install ceph-salt
cd /root
git clone {{ ceph_salt_git_repo }}
cd ceph-salt
zypper --non-interactive install autoconf gcc python3-devel python3-pip python3-curses

{% if ceph_salt_fetch_github_pr_heads %}
# fetch the available PRs (HEAD) from github. With that, "ceph_salt_git_branch" can be something like "origin/pr/127" to checkout a github PR
git fetch origin "+refs/pull/*/head:refs/remotes/origin/pr/*"
{% endif %}
{% if ceph_salt_fetch_github_pr_merges %}
# fetch the available PRs (MERGE) from github. With that, "ceph_salt_git_branch" can be something like "origin/pr-merged/127" to checkout a github PR
git fetch origin "+refs/pull/*/merge:refs/remotes/origin/pr-merged/*"
{% endif %}

git checkout {{ ceph_salt_git_branch }}

pip install --prefix /usr .
# install ceph-salt-formula
cp -r ceph-salt-formula/salt/* /srv/salt/
chown -R salt:salt /srv
{% else %}
# ceph-salt-formula is installed automatically as a dependency of ceph-salt
zypper --non-interactive install ceph-salt
{% endif %}

systemctl restart salt-master
{% include "salt/wait_for_minions.j2" %}

{% if use_salt %}
salt '*' saltutil.pillar_refresh
salt '*' saltutil.sync_all
sleep 2
{% endif %}

{% if stop_before_ceph_salt_config %}
set +x
echo "Stopping the deployment now because --stop-before-ceph-salt-config option was given."
set -x
exit 0
{% endif %} {# stop_before_ceph_salt_config #}

echo "PATH is $PATH"
type ceph-salt
ceph-salt --version

{% for node in nodes %}
{% if node.has_roles() and not node.has_exclusive_role('client') %}
ceph-salt config /ceph_cluster/minions add {{ node.fqdn }}
ceph-salt config /ceph_cluster/roles/cephadm add {{ node.fqdn }}
{% endif %}
{% if node.has_role('admin') %}
ceph-salt config /ceph_cluster/roles/admin add {{ node.fqdn }}
{% endif %}
{% endfor %}
ceph-salt config /ceph_cluster/roles/bootstrap set {{ cephadm_bootstrap_node.fqdn }}
{% if ipv6 %}
IPV6_CMD="ip -6 addr | grep 'scope global dynamic mngtmpaddr' | sed -e 's/.*inet6 \(.*\)\/.*/\1/'"
IPV6_ADDR="$(ssh {{ cephadm_bootstrap_node.name }} $IPV6_CMD)"
ceph-salt config /cephadm_bootstrap/mon_ip set "$IPV6_ADDR"
{% else %}
ceph-salt config /cephadm_bootstrap/mon_ip set {{ bootstrap_mon_ip }}
{% endif %}

ceph-salt config /ssh/ generate
ceph-salt config /time_server/servers add {{ master.fqdn }}
{% set external_timeserver = "pool.ntp.org" %}
ceph-salt config /time_server/external_servers add {{ external_timeserver }}
ceph-salt config /time_server/subnet set {{ public_network }}

{% if reg %}
ceph-salt config /containers/registries_conf/registries add prefix={{ reg.prefix }} location={{ reg.location }} insecure={{ reg.insecure }}
{% endif %}

{% if ceph_image_path %}
ceph-salt config /cephadm_bootstrap/ceph_image_path set {{ ceph_image_path }}
{% endif %}

{% if storage_nodes < 3 %}
ceph-salt config /cephadm_bootstrap/ceph_conf add global
ceph-salt config /cephadm_bootstrap/ceph_conf/global set "osd crush chooseleaf type" 0
{% endif %}

{% if msgr2_secure_mode %}
ceph-salt config /cephadm_bootstrap/ceph_conf add global
ceph-salt config /cephadm_bootstrap/ceph_conf/global set ms_cluster_mode secure
ceph-salt config /cephadm_bootstrap/ceph_conf/global set ms_service_mode secure
ceph-salt config /cephadm_bootstrap/ceph_conf/global set ms_client_mode secure
{% endif %}

{% if msgr2_prefer_secure %}
ceph-salt config /cephadm_bootstrap/ceph_conf add global
ceph-salt config /cephadm_bootstrap/ceph_conf/global set ms_cluster_mode "secure crc"
ceph-salt config /cephadm_bootstrap/ceph_conf/global set ms_service_mode "secure crc"
ceph-salt config /cephadm_bootstrap/ceph_conf/global set ms_client_mode "secure crc"
{% endif %}

ceph-salt config /cephadm_bootstrap/dashboard/username set admin
ceph-salt config /cephadm_bootstrap/dashboard/password set admin
ceph-salt config /cephadm_bootstrap/dashboard/force_password_update disable

ceph-salt config ls
ceph-salt export --pretty
ceph-salt status

zypper repos --details
zypper info cephadm | grep -E '(^Repo|^Version)'
ceph-salt --version

{% if stop_before_ceph_salt_apply %}
set +x
echo "Stopping the deployment now because --stop-before-ceph-salt-apply option was given."
set -x
exit 0
{% endif %} {# stop_before_ceph_salt_apply #}

{% if stop_before_cephadm_bootstrap %}
set +x
echo "Stopping the deployment now because --stop-before-cephadm-bootstrap option was given"
exit 0
{% endif %} {# stop_before_cephadm_bootstrap #}

{% if use_salt %}
salt -G 'ceph-salt:member' state.apply ceph-salt
echo "\"salt state.apply\" exit code: $?"
{% else %}
stdbuf -o0 ceph-salt -ldebug apply --non-interactive
echo "\"ceph-salt apply\" exit code: $?"
{% endif %}

{% if stop_before_ceph_orch_apply %}
set +x
echo "Stopping the deployment now because --stop-before-ceph-orch-apply option was given."
set -x
exit 0
{% endif %} {# stop_before_ceph_orch_apply #}

# Wait for the bootstrap MON+MGR to appear

function number_of_foos_in_bootstrap_cephadm_ls {
    local foo="$1"
    set -x
    ssh {{ cephadm_bootstrap_node.fqdn }} cephadm ls | jq "[ .[].name | select(startswith(\"$foo\")) ] | length"
    set +x
}

set +x
timeout_seconds="{{ reasonable_timeout_in_seconds }}"
remaining_seconds="$timeout_seconds"
interval_seconds="30"
while true ; do
    ACTUAL_NUMBER_OF_MONS="$(number_of_foos_in_bootstrap_cephadm_ls mon)"
    ACTUAL_NUMBER_OF_MGRS="$(number_of_foos_in_bootstrap_cephadm_ls mgr)"
    echo "MONs in cluster (actual/expected): $ACTUAL_NUMBER_OF_MONS/1 (${remaining_seconds} seconds to timeout)"
    echo "MGRs in cluster (actual/expected): $ACTUAL_NUMBER_OF_MGRS/1 (${remaining_seconds} seconds to timeout)"
    remaining_seconds="$(( remaining_seconds - interval_seconds ))"
    [ "$ACTUAL_NUMBER_OF_MONS" -ge "1" ] && [ "$ACTUAL_NUMBER_OF_MGRS" -ge "1" ] && break
    if [ "$remaining_seconds" -le "0" ] ; then
        set -x
        ceph status
        set +x
        echo "It seems unlikely that the bootstrap MON and MGR will ever appear. Bailing out!"
        false
    fi  
    echo "..."
    sleep "$interval_seconds"
done
if [ "$ACTUAL_NUMBER_OF_MONS" -gt "1" ] ; then
    echo
    echo
    echo "WARNING: \"cephadm bootstrap\" deployed more MONs than expected!"
    echo
    echo
fi
if [ "$ACTUAL_NUMBER_OF_MGRS" -gt "1" ] ; then
    echo
    echo
    echo "WARNING: \"cephadm bootstrap\" deployed more MGRs than expected!"
    echo
    echo
fi
set -x

set +x
echo "ceph status"
if ! ceph status ; then
    echo "\"ceph status\" failed, dumping contents of /etc/ceph"
    ls -l /etc/ceph
    for f in /etc/ceph/* ; do
        echo -e "\n$f:"
        cat $f
    done
    for f in /var/log/ceph/cephadm* /var/log/ceph-salt.log ; do
        echo -e "\n$f:"
        cat $f
    done
    false
fi
set -x

echo "EVERYTHING IS FINE BUT WE'RE GOING TO BAIL OUT NOW ANYWAY"
false
