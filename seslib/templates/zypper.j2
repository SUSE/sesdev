# zypper.j2 (part of provision.sh.j2)

# do not exclude documentation files when installing RPM packages
sed -i 's/^rpm\.install\.excludedocs.*$/# rpm.install.excludedocs = no/' /etc/zypp/zypp.conf

# do not ignore "Recommends" and "Supplements" when resolving dependencies of RPM packages
sed -i 's/^solver\.onlyRequires.*$/# solver.onlyRequires = false/' /etc/zypp/zypp.conf

# enable autorefresh on all zypper repos
find /etc/zypp/repos.d -type f -exec sed -i -e 's/^autorefresh=.*/autorefresh=1/' {} \;

# remove RPMs that are often silently assumed to be present
# removing such RPMs is desirable because these "implied" dependencies become
# known, allowing them to be explicitly declared
{% if version != 'ses5' %}
zypper --non-interactive remove curl || true
{% endif %}{# version != 'ses5' #}
zypper --non-interactive remove rsync || true
zypper --non-interactive remove which || true

# remove Python 2 so it doesn't pollute the environment
{% if os != 'sles-12-sp3' %}
zypper --non-interactive remove python-base || true
{% endif %}{# os != 'sles-12-sp3' #}

# remove Non-OSS repos in openSUSE
{% if os.startswith('leap') or os == "tumbleweed" %}
zypper --non-interactive removerepo repo-non-oss || true
zypper --non-interactive removerepo repo-update-non-oss || true
zypper --non-interactive removerepo repo-debug-non-oss || true
zypper --non-interactive removerepo repo-debug-update-non-oss || true
zypper --non-interactive removerepo repo-source-non-oss || true
{% endif %}{# os.startswith('leap') or os == "tumbleweed" #}

# base repos
{% for os_repo_name, os_repo_url in os_base_repos %}
zypper addrepo --refresh {{ os_repo_url }} {{ os_repo_name }}
{% endfor %}

# ses6 deepsea install from source requires:
# - SES6 Internal Media repo
# - SLE-15-SP1 Developer Tools Module repos
{% if version == 'ses6' and deepsea_git_repo and node == master %}
{% for internal_media_repo_name, internal_media_repo_url in internal_media_repo %}
zypper addrepo --refresh {{ internal_media_repo_url }} {{ internal_media_repo_name }}
{% endfor %}
{% for dev_tools_repo_name, dev_tools_repo_url in developer_tools_repos %}
zypper addrepo --refresh {{ dev_tools_repo_url }} {{ dev_tools_repo_name }}
{% endfor %}
{% endif %}{# version == 'ses6' and deepsea_git_repo #}

# make check repos
{% if version == 'makecheck' %}
{% for os_repo_name, os_repo_url in os_makecheck_repos %}
zypper addrepo --refresh {{ os_repo_url }} {{ os_repo_name }}
{% endfor %}
{% endif %}{# version == 'makecheck' #}

# devel repos
{% set devel_repo_script = "/home/vagrant/add-devel-repo.sh" %}
cat > {{ devel_repo_script }} << 'EOF'
#!/bin/bash -x
[[ "$*" =~ "--update" ]] && UPDATE="yes"
set -x
{% set devel_repo_count = version_devel_repos|length %}
{% for _repo in version_devel_repos %}
{% set devel_repo_name = "devel-repo-" ~ loop.index %}
zypper addrepo --refresh
{%- if _repo.priority %}
 --priority {{ _repo.priority }}
{%- endif %}
 {{ _repo.url }} {{ devel_repo_name }}
{% endfor %}
zypper --gpg-auto-import-keys refresh
if [ "$UPDATE" ] ; then
    zypper dist-upgrade \
        --allow-vendor-change \
        --auto-agree-with-licenses \
{% for r in range(1, devel_repo_count + 1) %}
{% set devel_repo_name = "devel-repo-" ~ r %}
        --from={{ devel_repo_name }} \
{% endfor %}
        --no-confirm
        --replacefiles  # I strongly assume this should only be used when upgrading from devel repos
fi
EOF
chmod 755 {{ devel_repo_script }}
cat {{ devel_repo_script }}

{% if devel_repo or not core_version %}
if bash -e "{{ devel_repo_script }}" ; then
    true
else
    echo "{{ devel_repo_script }} failed! Bailing out."
    false
fi
{% endif %}{# devel_repo or not core_version #}

# custom repos
{% for _repo in node.custom_repos %}
zypper addrepo --no-gpgcheck --refresh
{%- if _repo.priority %}
 --priority={{ _repo.priority }}
{%- endif %}
 {{ _repo.url }} {{ _repo.name }}
{% endfor %}

# populate upgrade script
{% set upgrade_script = "/home/vagrant/upgrade.sh" %}
cat > {{ upgrade_script }} << 'EOF'
#!/bin/bash -x
TEMP=$(getopt -o h --long "to:,from:,devel" -n 'upgrade.sh' -- "$@") || ( echo "Terminating..." >&2 ; exit 1 )
eval set -- "$TEMP"
while true ; do
    case "$1" in
        --devel) DEVEL="--devel" ; shift ;;
        --from) shift ; FROM_VERSION="$1" ; shift ;;
        --to) shift ; TO_VERSION="$1" ; shift ;;
        --) shift ; break ;;
        *) echo "Internal error" ; exit 1 ;;
    esac
done
source /etc/os-release
if [ "$FROM_VERSION" = "nautilus" ] ; then
    if [ "$ID" = "opensuse-leap" ] && [ "$VERSION_ID" = "15.1" ] ; then
        echo "Upgrading from Ceph Nautilus (openSUSE Leap 15.1)"
    else
        echo "ID is ->$ID<-"
        echo "VERSION_ID is ->$VERSION_ID<-"
        echo "Does not match ->opensuse-leap<- and ->15.1<-"
        echo "Yet we were asked to upgrade from Ceph Nautilus"
        exit 1
    fi
    if [ "$TO_VERSION" = "octopus" ] ; then
        echo "Upgrading to Ceph Octopus (openSUSE Leap 15.2)"
    else
        echo "TO_VERSION is ->$TO_VERSION<-"
        echo "Does not match ->octopus<-"
        echo "Yet we only support upgrading Nautilus to Octopus"
        exit 1
    fi
elif [ "$FROM_VERSION" = "ses6" ] ; then
    if [ "$ID" = "sles" ] && [ "$VERSION_ID" = "15.1" ] ; then
        echo "Upgrading from SES6 (SLE-15-SP1)"
    else
        echo "ID is ->$ID<-"
        echo "VERSION_ID is ->$VERSION_ID<-"
        echo "Does not match ->sles<- and ->15.1<-"
        echo "Yet we were asked to upgrade from SES6"
        exit 1
    fi
    if [ "$TO_VERSION" = "ses7" ] ; then
        echo "Upgrading to SES7 (SLE-15-SP2)"
    else
        echo "TO_VERSION is ->$TO_VERSION<-"
        echo "Does not match ->ses7<-"
        echo "Yet we only support upgrading SES6 to SES7"
        exit 1
    fi
elif [ "$FROM_VERSION" = "ses5" ] ; then
    if [ "$ID" = "sles" ] && [ "$VERSION_ID" = "12.3" ] ; then
        echo "Upgrading from SES5 (SLE-12-SP3)"
    else
        echo "ID is ->$ID<-"
        echo "VERSION_ID is ->$VERSION_ID<-"
        echo "Does not match ->sles<- ->12.3<-"
        echo "Yet we were asked to upgrade from SES5"
        exit 1
    fi
    if [ "$TO_VERSION" = "ses6" ] ; then
        echo "Upgrading to SES6 (SLE-15-SP1)"
    else
        echo "TO_VERSION is ->$TO_VERSION<-"
        echo "Does not match ->ses6<-"
        echo "Yet we only support upgrading SES5 to SES6"
        exit 1
    fi
fi
echo "=> clobber existing repos" > /dev/null
cp -a /etc/zypp/repos.d /etc/zypp/repos.d.bck
rm -f /etc/zypp/repos.d/*
echo "=> add os repos for $TO_VERSION" > /dev/null
{% for os_repo_name, os_repo_url in os_upgrade_repos %}
zypper addrepo --refresh {{ os_repo_url }} {{ os_repo_name }}
{% endfor %}
echo "=> add devel repos for $TO_VERSION" > /dev/null
if [ "$DEVEL" ] ; then
{% set devel_repo_count = upgrade_devel_repos|length %}
{% for _repo in upgrade_devel_repos %}
{% set devel_repo_name = "devel-repo-" ~ loop.index %}
    zypper addrepo --refresh {{ _repo }} {{ devel_repo_name }}
{% endfor %}
fi
echo "=> refresh local metadata cache" > /dev/null
zypper --non-interactive --no-gpg-checks refresh
echo "=> dist-upgrade" > /dev/null
zypper dist-upgrade \
    --allow-vendor-change \
    --auto-agree-with-licenses \
    --no-confirm
EOF
chmod 755 {{ upgrade_script }}
cat {{ upgrade_script }}

# SUSE:CA repo on SLE
{% if os.startswith("sle") %}
zypper addrepo --refresh
{%- if os == 'sles-15-sp2' %}
 http://download.nue.suse.com/ibs/SUSE:/CA/SLE_15_SP2/SUSE:CA.repo
{%- elif os == 'sles-15-sp1' %}
 http://download.nue.suse.com/ibs/SUSE:/CA/SLE_15_SP1/SUSE:CA.repo
{%- elif os == 'sles-12-sp3' %}
 http://download.nue.suse.com/ibs/SUSE:/CA/SLE_12_SP3/SUSE:CA.repo
{% endif %}
{% endif %}{# os.startswith("sle") #}

zypper --gpg-auto-import-keys refresh
zypper repos --details

{% if os == "sles-12-sp3" %}
zypper --non-interactive install --from storage-update --force python-base python-xml
zypper --non-interactive install --from update --force libncurses5 libncurses6
{% endif %}{# os == "sles-12-sp3" #}

{% set basic_pkgs_to_install = [
       'vim',
       'git-core',
       'iputils',
       'jq',
       'make',
       'iptables',
       'patch',
       'man',
       'command-not-found',
       'bc',
       'apparmor-utils',
       'apparmor-parser',
       'lsof',
   ] %}
{% if os == 'sles-12-sp3' %}
zypper --non-interactive install {{ basic_pkgs_to_install | join(' ') }} ntp
{% else %}
zypper --non-interactive install {{ basic_pkgs_to_install | join(' ') }} chrony hostname
{% endif %}{# os == 'sles-12-sp3' #}

{% if os != 'sles-12-sp3' %}
# install systemd-coredump, ensuring that it has the same exact version as systemd
# (avoid newer systemd possibly pre-installed by Kiwi in the Vagrant Box)
zypper --non-interactive install --force systemd systemd-sysvinit udev libudev1
zypper --non-interactive install systemd-coredump
{% endif %}{# os != 'sles-12-sp3' #}

{% if os.startswith("sle") %}
{% set sle_pkgs_to_install = [
       'ca-certificates-suse',
       'supportutils',
   ] %}
zypper --non-interactive install {{ sle_pkgs_to_install | join(' ') }}
{% endif %}{# os.startswith("sle") #}

{% if os in ['leap-15.2', 'sles-15-sp2'] %}
# install rbd-nbd on all nodes: on SLE-15-SP2 it should be in the Base System
# module
zypper --non-interactive install rbd-nbd
{% endif %}{# os in ['leap-15.2', 'sles-15-sp2'] #}
